                              1 	.include	"global.s"
                    0001      1 	.NEAR_CALLS = 1         ; <near_calls> - tag so that sed can change this
                              2         
                              3 	;; Changed by astorgb.pl to 1
                    0000      4 	__RGBDS__	= 0
                              5 
                              6 	
                              7 	;;  Screen dimensions 
                    0013      8 	.MAXCURSPOSX	= 0x13	; In tiles
                    0011      9 	.MAXCURSPOSY	= 0x11
                             10 
                    0080     11 	.START		= 0x80
                    0040     12 	.SELECT		= 0x40
                    0020     13 	.B		= 0x20
                    0010     14 	.A		= 0x10
                    0008     15 	.DOWN		= 0x08
                    0004     16 	.UP		= 0x04
                    0002     17 	.LEFT		= 0x02
                    0001     18 	.RIGHT		= 0x01
                             19 
                    00A0     20 	.SCREENWIDTH	= 0xA0
                    0090     21 	.SCREENHEIGHT	= 0x90
                    0007     22 	.MINWNDPOSX	= 0x07
                    0000     23 	.MINWNDPOSY	= 0x00
                    00A6     24 	.MAXWNDPOSX	= 0xA6
                    008F     25 	.MAXWNDPOSY	= 0x8F
                             26 
                    0001     27 	.VBL_IFLAG	= 0x01
                    0002     28 	.LCD_IFLAG	= 0x02
                    0004     29 	.TIM_IFLAG	= 0x04
                    0008     30 	.SIO_IFLAG	= 0x08
                    0010     31 	.JOY_IFLAG	= 0x10
                             32  
                    0000     33 	.P1		= 0x00	; Joystick: 1.1.P15.P14.P13.P12.P11.P10
                    0001     34 	.SB		= 0x01	; Serial IO data buffer
                    0002     35 	.SC		= 0x02	; Serial IO control register
                    0004     36 	.DIV		= 0x04	; Divider register
                    0005     37 	.TIMA		= 0x05	; Timer counter
                    0006     38 	.TMA		= 0x06	; Timer modulo
                    0007     39 	.TAC		= 0x07	; Timer control
                    000F     40 	.IF		= 0x0F	; Interrupt flags: 0.0.0.JST.SIO.TIM.LCD.VBL
                    0010     41 	.NR10		= 0x10	; Sound register
                    0011     42 	.NR11		= 0x11	; Sound register
                    0012     43 	.NR12		= 0x12	; Sound register
                    0013     44 	.NR13		= 0x13	; Sound register
                    0014     45 	.NR14		= 0x14	; Sound register
                    0016     46 	.NR21		= 0x16	; Sound register
                    0017     47 	.NR22		= 0x17	; Sound register
                    0018     48 	.NR23		= 0x18	; Sound register
                    0019     49 	.NR24		= 0x19	; Sound register
                    001A     50 	.NR30		= 0x1A	; Sound register
                    001B     51 	.NR31		= 0x1B	; Sound register
                    001C     52 	.NR32		= 0x1C	; Sound register
                    001D     53 	.NR33		= 0x1D	; Sound register
                    001E     54 	.NR34		= 0x1E	; Sound register
                    0020     55 	.NR41		= 0x20	; Sound register
                    0021     56 	.NR42		= 0x21	; Sound register
                    0022     57 	.NR43		= 0x22	; Sound register
                    0023     58 	.NR44		= 0x23	; Sound register
                    0024     59 	.NR50		= 0x24	; Sound register
                    0025     60 	.NR51		= 0x25	; Sound register
                    0026     61 	.NR52		= 0x26	; Sound register
                    004E     62 	.LCDC		= 0x4E	; LCD control
                    0041     63 	.STAT		= 0x41	; LCD status
                    0042     64 	.SCY		= 0x42	; Scroll Y
                    0043     65 	.SCX		= 0x43	; Scroll X
                    0044     66 	.LY		= 0x44	; LCDC Y-coordinate
                    0045     67 	.LYC		= 0x45	; LY compare
                    0046     68 	.DMA		= 0x46	; DMA transfer
                    0047     69 	.BGP		= 0x47	; BG palette data
                    0048     70 	.OBP0		= 0x48	; OBJ palette 0 data
                    0049     71 	.OBP1		= 0x49	; OBJ palette 1 data
                    004A     72 	.WY		= 0x4A	; Window Y coordinate
                    004B     73 	.WX		= 0x4B	; Window X coordinate
                    004D     74 	.KEY1		= 0x4D	; CPU speed
                    004F     75 	.VBK		= 0x4F	; VRAM bank
                    0051     76 	.HDMA1		= 0x51	; DMA control 1
                    0052     77 	.HDMA2		= 0x52	; DMA control 2
                    0053     78 	.HDMA3		= 0x53	; DMA control 3
                    0054     79 	.HDMA4		= 0x54	; DMA control 4
                    0055     80 	.HDMA5		= 0x55	; DMA control 5
                    0056     81 	.RP		= 0x56	; IR port
                    0068     82 	.BCPS		= 0x68	; BG color palette specification
                    0069     83 	.BCPD		= 0x69	; BG color palette data
                    006A     84 	.OCPS		= 0x6A	; OBJ color palette specification
                    006B     85 	.OCPD		= 0x6B	; OBJ color palette data
                    0070     86 	.SVBK		= 0x70	; WRAM bank
                    00FF     87 	.IE		= 0xFF	; Interrupt enable
                             88 
                    0001     89 	.G_MODE		= 0x01	; Graphic mode
                    0002     90 	.T_MODE		= 0x02	; Text mode (bit 2)
                    0002     91 	.T_MODE_OUT	= 0x02	; Text mode output only
                    0003     92 	.T_MODE_INOUT	= 0x03	; Text mode with input
                    0004     93 	.M_NO_SCROLL	= 0x04	; Disables scrolling of the screen in text mode
                    0008     94 	.M_NO_INTERP	= 0x08	; Disables special character interpretation
                             95 
                    2000     96 	.MBC1_ROM_PAGE	= 0x2000 ; Address to write to for MBC1 switching
                             97 	
                             98 	;; Status codes for IO
                    0000     99 	.IO_IDLE	= 0x00
                    0001    100 	.IO_SENDING	= 0x01
                    0002    101 	.IO_RECEIVING	= 0x02
                    0004    102 	.IO_ERROR	= 0x04
                            103 
                            104 	;; Type of IO data
                    0066    105 	.DT_IDLE	= 0x66
                    0055    106 	.DT_RECEIVING	= 0x55
                            107 
                            108 	;; Table of routines for modes
                    01E0    109 	.MODE_TABLE	= 0x01E0
                            110 
                            111 	;; C related
                            112 	;; Overheap of a banked call.  Used for parameters
                            113 	;;  = ret + real ret + bank
                            114 
                    0001    115 	.if .NEAR_CALLS
                    0002    116 	.BANKOV		= 2
                            117 
                            118 	.else
                            119 	.BANKOV		= 6
                            120 
                            121 	.endif
                            122 	
                            123 	.globl	banked_call
                            124 	.globl	banked_ret
                            125 	
                            126 	;; Global variables
                            127 	.globl	.mode
                            128 
                            129 	.globl	__cpu
                            130 
                            131 	.globl	__io_out
                            132 	.globl	__io_in
                            133 	.globl	__io_status
                            134 
                            135 	;; Global routines
                            136 	.globl	.set_mode
                            137 
                            138 	.globl	.reset
                            139 
                            140 	.globl	.display_off
                            141 
                            142 	.globl	.wait_vbl_done
                            143 
                            144 	;; Interrupt routines 
                            145 	.globl	.add_VBL
                            146 	.globl	.add_LCD
                            147 	.globl	.add_TIM
                            148 	.globl	.add_SIO
                            149 	.globl	.add_JOY
                            150 
                            151 	;; Symbols defined at link time
                            152 	.globl	.STACK
                            153 	.globl	.OAM
                            154 	.globl	.refresh_OAM
                            155 
                            156 	;; Initialization routine   
                            157 	.globl	.init
                            158 
                            159 	;; Main user routine	
                            160 	.globl	_main
                              2 
                              3 	;; ****************************************
                              4 	;; Beginning of module
                              5 	;; BANKED: checked
                              6 	.title	"Runtime"
                              7 	.module	Runtime
                              8 	.area	_HEADER (ABS)
                              9 
                             10 	;; Standard header for the GB
   0000                      11 	.org	0x00
   0000 C9                   12 	RET			; Empty function (default for interrupts)
                             13 
   0010                      14 	.org	0x10
   0010 80 40 20 10 08 04    15 	.byte	0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
        02 01
   0018 01 02 04 08 10 20    16 	.byte	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80
        40 80
                             17 
                             18 	;; Interrupt vectors
   0040                      19 	.org	0x40		; VBL
   0040                      20 .int_VBL:
   0040 E5                   21 	PUSH	HL
   0041 21r09s00             22 	LD	HL,#.int_0x40
   0044 C3r67s00             23 	JP	.int
                             24 
   0048                      25 	.org	0x48		; LCD
   0048                      26 .int_LCD:
   0048 E5                   27 	PUSH	HL
   0049 21r19s00             28 	LD	HL,#.int_0x48
   004C C3r67s00             29 	JP	.int
                             30 
   0050                      31 	.org	0x50		; TIM
   0050                      32 .int_TIM:
   0050 E5                   33 	PUSH	HL
   0051 21r29s00             34 	LD	HL,#.int_0x50
   0054 C3r67s00             35 	JP	.int
                             36 
   0058                      37 	.org	0x58		; SIO
   0058                      38 .int_SIO:
   0058 E5                   39 	PUSH	HL
   0059 21r39s00             40 	LD	HL,#.int_0x58
   005C C3r67s00             41 	JP	.int
                             42 
   0060                      43 	.org	0x60		; JOY
   0060                      44 .int_JOY:
   0060 E5                   45 	PUSH	HL
   0061 21r49s00             46 	LD	HL,#.int_0x60
   0064 C3r67s00             47 	JP	.int
                             48 
   0067                      49 .int:
   0067 F5                   50 	PUSH	AF
   0068 C5                   51 	PUSH	BC
   0069 D5                   52 	PUSH	DE
   006A                      53 1$:
   006A 2A                   54 	LD	A,(HL+)
   006B B6                   55 	OR	(HL)
   006C 28 0B                56 	JR	Z,2$
   006E E5                   57 	PUSH	HL
   006F 3A                   58 	LD	A,(HL-)
   0070 6E                   59 	LD	L,(HL)
   0071 67                   60 	LD	H,A
   0072 CDr7Es00             61 	CALL	3$
   0075 E1                   62 	POP	HL
   0076 23                   63 	INC	HL
   0077 18 F1                64 	JR	1$
   0079                      65 2$:
   0079 D1                   66 	POP	DE
   007A C1                   67 	POP	BC
   007B F1                   68 	POP	AF
   007C E1                   69 	POP	HL
   007D D9                   70 	RETI
                             71 
   007E                      72 3$:
   007E E9                   73 	JP	(HL)
                             74 
                             75 	;; GameBoy Header
                             76 
                             77 	;; DO NOT CHANGE...
   0100                      78 	.org	0x100
   0100                      79 .header:
   0100 00                   80 	NOP
   0101 C3 50 01             81 	JP	0x150
   0104 01 10 CE EF 00 00    82 	.byte   0x01,0x10,0xCE,0xEF,0x00,0x00,0x44,0xAA
        44 AA
   010C 00 74 00 18 11 95    83 	.byte   0x00,0x74,0x00,0x18,0x11,0x95,0x00,0x34
        00 34
   0114 00 1A 00 D5 00 22    84 	.byte   0x00,0x1A,0x00,0xD5,0x00,0x22,0x00,0x69
        00 69
   011C 6F F6 F7 73 09 90    85 	.byte   0x6F,0xF6,0xF7,0x73,0x09,0x90,0xE1,0x10
        E1 10
   0124 44 40 9A 90 D5 D0    86 	.byte   0x44,0x40,0x9A,0x90,0xD5,0xD0,0x44,0x30
        44 30
   012C A9 21 5D 48 22 E0    87 	.byte   0xA9,0x21,0x5D,0x48,0x22,0xE0,0xF8,0x60
        F8 60
                             88 
                             89 	;; Title of the game
   0134                      90 	.org	0x134
   0134 54 69 74 6C 65 00    91 	.asciz	"Title"
                             92 
   0144                      93 	.org	0x144
   0144 00 00 00             94 	.byte	0,0,0
                             95 
                             96 	;; Cartridge type is ROM only
   0147                      97 	.org	0x147
   0147 00                   98 	.byte	0
                             99 
                            100 	;; ROM size is 32kB
   0148                     101 	.org	0x148
   0148 00                  102 	.byte	0
                            103 
                            104 	;; RAM size is 0kB
   0149                     105 	.org	0x149
   0149 00                  106 	.byte	0
                            107 
                            108 	;; Maker ID
   014A                     109 	.org	0x14A
   014A 00 00               110 	.byte	0x00,0x00
                            111 
                            112 	;; Version number
   014C                     113 	.org	0x14C
   014C 01                  114 	.byte	0x01
                            115 
                            116 	;; Complement check
   014D                     117 	.org	0x14D
   014D 00                  118 	.byte	0x00
                            119 
                            120 	;; Checksum
   014E                     121 	.org	0x14E
   014E 00 00               122 	.byte	0x00,0x00
                            123 
                            124 	;; ****************************************
   0150                     125 	.org	0x150
   0150                     126 .code_start:
                            127 	;; Beginning of the code
   0150 F3                  128 	DI			; Disable interrupts
   0151 57                  129 	LD	D,A		; Store CPU type in D
   0152 AF                  130 	XOR	A
                            131 	;; Initialize the stack
   0153 31r00s00            132 	LD	SP,#.STACK
                            133 	;; Clear from 0xC000 to 0xDFFF
   0156 21 FF DF            134 	LD	HL,#0xDFFF
   0159 0E 20               135 	LD	C,#0x20
   015B 06 00               136 	LD	B,#0x00
   015D                     137 1$:
   015D 32                  138 	LD	(HL-),A
   015E 05                  139 	DEC	B
   015F 20 FC               140 	JR	NZ,1$
   0161 0D                  141 	DEC	C
   0162 20 F9               142 	JR	NZ,1$
                            143 	;; Clear from 0xFE00 to 0xFEFF
   0164 21 FF FE            144 	LD	HL,#0xFEFF
   0167 06 00               145 	LD	B,#0x00
   0169                     146 2$:
   0169 32                  147 	LD	(HL-),A
   016A 05                  148 	DEC	B
   016B 20 FC               149 	JR	NZ,2$
                            150 	;; Clear from 0xFF80 to 0xFFFF
   016D 21 FF FF            151 	LD	HL,#0xFFFF
   0170 06 80               152 	LD	B,#0x80
   0172                     153 3$:
   0172 32                  154 	LD	(HL-),A
   0173 05                  155 	DEC	B
   0174 20 FC               156 	JR	NZ,3$
                            157 ; 	LD	(.mode),A	; Clearing (.mode) is performed when clearing RAM
                            158 	;; Store CPU type
   0176 7A                  159 	LD	A,D
   0177 EAr00s00            160 	LD	(__cpu),A
                            161 
                            162 	;; Turn the screen off
   017A CDr9Fs00            163 	CALL	.display_off
                            164 
                            165 	;; Initialize the display
   017D AF                  166 	XOR	A
   017E E0 42               167 	LDH	(.SCY),A
   0180 E0 43               168 	LDH	(.SCX),A
   0182 E0 41               169 	LDH	(.STAT),A
   0184 E0 4A               170 	LDH	(.WY),A
   0186 3E 07               171 	LD	A,#0x07
   0188 E0 4B               172 	LDH	(.WX),A
                            173 
                            174 	;; Copy refresh_OAM routine to HIRAM
   018A 01r00s00            175 	LD	BC,#.refresh_OAM
   018D 21rB6s00            176 	LD	HL,#.start_refresh_OAM
   0190 06 0A               177 	LD	B,#.end_refresh_OAM-.start_refresh_OAM
   0192                     178 4$:
   0192 2A                  179 	LD	A,(HL+)
   0193 E2                  180 	LDH	(C),A
   0194 0C                  181 	INC	C
   0195 05                  182 	DEC	B
   0196 20 FA               183 	JR	NZ,4$
                            184 
                            185 	;; Install interrupt routines
   0198 01r77s00            186 	LD	BC,#.vbl
   019B CDr2Es00            187 	CALL	.add_VBL
   019E 01rC0s00            188 	LD	BC,#.serial_IO
   01A1 CDr40s00            189 	CALL	.add_SIO
                            190 
                            191 	;; Standard color palettes
   01A4 3E E4               192 	LD	A,#0b11100100	; Grey 3 = 11 (Black)
                            193 				; Grey 2 = 10 (Dark grey)
                            194 				; Grey 1 = 01 (Light grey)
                            195 				; Grey 0 = 00 (Transparent)
   01A6 E0 47               196 	LDH	(.BGP),A
   01A8 E0 48               197 	LDH	(.OBP0),A
   01AA 3E 1B               198 	LD	A,#0b00011011
   01AC E0 49               199 	LDH	(.OBP1),A
                            200 
                            201 	;; Turn the screen on
   01AE 3E 03               202 	LD	A,#0b00000011	; LCD		= On
                            203 				; WindowBank	= 0x9C00
                            204 				; Window	= Off
                            205 				; BG Chr	= 0x8800
                            206 				; BG Bank	= 0x9800
                            207 				; OBJ		= 8x8
                            208 				; OBJ		= Off
                            209 				; BG		= Off
   01B0 E0 4E               210 	LDH	(.LCDC),A
   01B2 AF                  211 	XOR	A
   01B3 E0 0F               212 	LDH	(.IF),A
   01B5 3E 09               213 	LD	A,#0b00001001	; Pin P10-P13	=   Off
                            214 				; Serial I/O	=   On
                            215 				; Timer Ovfl	=   Off
                            216 				; LCDC		=   Off
                            217 				; V-Blank	=   On
   01B7 E0 FF               218 	LDH	(.IE),A
                            219 
   01B9 AF                  220 	XOR	A
   01BA E0 26               221 	LDH	(.NR52),A	; Turn sound off
   01BC E0 02               222 	LDH	(.SC),A		; Use external clock
   01BE 3E 66               223 	LD	A,#.DT_IDLE
   01C0 E0 01               224 	LDH	(.SB),A		; Send IDLE byte
   01C2 3E 80               225 	LD	A,#0x80
   01C4 E0 02               226 	LDH	(.SC),A		; Use external clock
                            227 
   01C6 AF                  228 	XOR	A		; Erase the malloc list
                            229 ;	LD	(_malloc_heap_start+0),A
                            230 ;	LD	(_malloc_heap_start+1),A
                            231 ;	LD	(.sys_time+0),A	; Zero the system clock
                            232 ;	LD	(.sys_time+1),A	
                            233 
   01C7 CDr00s00            234 	call	gsinit
                            235 
                            236 ;	CALL	.init		
                            237 
   01CA FB                  238 	EI			; Enable interrupts
                            239 
                            240 	;; Call the main function
   01CB CDr8As01            241 	CALL	banked_call
   01CEr00s00               242 	.dw	_main
                    0000    243 	.if __RGBDS__
                            244 	.dw	BANK(_main)
                            245 	.else
   01D0 01 00               246 	.dw	1
                            247 	.endif
   01D2                     248 _exit::	
   01D2                     249 99$:
   01D2 76                  250 	HALT
   01D3 18 FD               251 	JR	99$		; Wait forever
                            252 
   01E0                     253 	.org	.MODE_TABLE
                            254 	;; Jump table for modes
   01E0 C9                  255 	RET
                            256 
                            257 	;; ****************************************
                            258 
                            259 	;; Ordering of segments for the linker
                            260 	;; Code that really needs to be in bank 0
                            261 	.area	_HOME
                            262 	;; Similar to _HOME
                            263 	.area	_BASE
                            264 	;; Code
                            265 	.area	_CODE
                            266 	;; Constant data
                            267 	.area	_LIT
                            268 	;; Constant data used to init _DATA
                            269 	.area	_GSINIT
                            270 	.area	_GSINITTAIL
                            271 	.area	_GSFINAL
                            272 	;; Initialised in ram data
                            273 	.area	_DATA
                            274 	;; Uninitialised ram data
                            275 	.area	_BSS
                            276 	;; For malloc
                            277 	.area	_HEAP
                            278 
                            279 	.area	_BSS
   0000                     280 __cpu::
   0000                     281 	.ds	0x01		; GB type (GB, PGB, CGB)
   0001                     282 .mode::
   0001                     283 	.ds	0x01		; Current mode
   0002                     284 __io_out::
   0002                     285 	.ds	0x01		; Byte to send
   0003                     286 __io_in::
   0003                     287 	.ds	0x01		; Received byte
   0004                     288 __io_status::
   0004                     289 	.ds	0x01		; Status of serial IO
   0005                     290 .vbl_done::
   0005                     291 	.ds	0x01		; Is VBL interrupt finished?
   0006                     292 __current_bank::
   0006                     293 	.ds	0x01		; Current MBC1 style bank.
   0007                     294 .sys_time::
   0007                     295 _sys_time::
   0007                     296 	.ds	0x02		; System time in VBL units
   0009                     297 .int_0x40::
   0009                     298 	.blkw	0x08
   0019                     299 .int_0x48::
   0019                     300 	.blkw	0x08
   0029                     301 .int_0x50::
   0029                     302 	.blkw	0x08
   0039                     303 .int_0x58::
   0039                     304 	.blkw	0x08
   0049                     305 .int_0x60::
   0049                     306 	.blkw	0x08
                            307 
                            308 	;; Runtime library
                            309 	.area	_GSINIT
   0000                     310 gsinit::
                            311 	.area	_GSINITTAIL
   0000 C9                  312 	ret
                            313 	
                            314 	.area	_HOME
                            315 	;; Call the initialization function for the mode specified in HL
   0000                     316 .set_mode::
   0000 7D                  317 	LD	A,L
   0001 EAr01s00            318 	LD	(.mode),A
                            319 
                            320 	;; AND to get rid of the extra flags
   0004 E6 03               321 	AND	#0x03
   0006 6F                  322 	LD	L,A
   0007 01 E0 01            323 	LD	BC,#.MODE_TABLE
   000A CB 25               324 	SLA	L		; Multiply mode by 4
   000C CB 25               325 	SLA	L
   000E 09                  326 	ADD	HL,BC
   000F E9                  327 	JP	(HL)		; Jump to initialization routine
                            328 
                            329 	;; Add interrupt routine in BC to the interrupt list
   0010                     330 .remove_VBL::
   0010 21r09s00            331 	LD	HL,#.int_0x40
   0013 C3r4Cs00            332 	JP	.remove_int
   0016                     333 .remove_LCD::
   0016 21r19s00            334 	LD	HL,#.int_0x48
   0019 C3r4Cs00            335 	JP	.remove_int
   001C                     336 .remove_TIM::
   001C 21r29s00            337 	LD	HL,#.int_0x50
   001F C3r4Cs00            338 	JP	.remove_int
   0022                     339 .remove_SIO::
   0022 21r39s00            340 	LD	HL,#.int_0x58
   0025 C3r4Cs00            341 	JP	.remove_int
   0028                     342 .remove_JOY::
   0028 21r49s00            343 	LD	HL,#.int_0x60
   002B C3r4Cs00            344 	JP	.remove_int
   002E                     345 .add_VBL::
   002E 21r09s00            346 	LD	HL,#.int_0x40
   0031 C3r6Cs00            347 	JP	.add_int
   0034                     348 .add_LCD::
   0034 21r19s00            349 	LD	HL,#.int_0x48
   0037 C3r6Cs00            350 	JP	.add_int
   003A                     351 .add_TIM::
   003A 21r29s00            352 	LD	HL,#.int_0x50
   003D C3r6Cs00            353 	JP	.add_int
   0040                     354 .add_SIO::
   0040 21r39s00            355 	LD	HL,#.int_0x58
   0043 C3r6Cs00            356 	JP	.add_int
   0046                     357 .add_JOY::
   0046 21r49s00            358 	LD	HL,#.int_0x60
   0049 C3r6Cs00            359 	JP	.add_int
                            360 
                            361 	;; Remove interrupt BC from interrupt list HL if it exists
                            362 	;; Abort if a 0000 is found (end of list)
                            363 	;; Will only remove last int on list
   004C                     364 .remove_int::
   004C                     365 1$:
   004C 2A                  366 	LD	A,(HL+)
   004D 5F                  367 	LD	E,A
   004E 56                  368 	LD	D,(HL)
   004F B2                  369 	OR	D
   0050 C8                  370 	RET	Z		; No interrupt found
                            371 
   0051 7B                  372 	LD	A,E
   0052 B9                  373 	CP	C
   0053 20 F7               374 	JR	NZ,1$
   0055 7A                  375 	LD	A,D
   0056 B8                  376 	CP	B
   0057 20 F3               377 	JR	NZ,1$
                            378 
   0059 AF                  379 	XOR	A
   005A 32                  380 	LD	(HL-),A
   005B 77                  381 	LD	(HL),A
   005C 3C                  382 	INC	A		; Clear Z flag
                            383 
                            384 	;; Now do a memcpy from here until the end of the list
   005D 54                  385 	LD	D,H
   005E 5D                  386 	LD	E,L
   005F 1B                  387 	DEC	DE
                            388 
   0060 23                  389 	INC	HL
   0061                     390 2$:
   0061 2A                  391 	LD	A,(HL+)
   0062 12                  392 	LD	(DE),A
   0063 47                  393 	LD	B,A
   0064 13                  394 	INC	DE
   0065 2A                  395 	LD	A,(HL+)
   0066 12                  396 	LD	(DE),A
   0067 13                  397 	INC	DE
   0068 B0                  398 	OR	B
   0069 C8                  399 	RET	Z
   006A 18 F5               400 	JR	2$
                            401 	
                            402 	;; Add interrupt routine in BC to the interrupt list in HL
   006C                     403 .add_int::
   006C                     404 1$:
   006C 2A                  405 	LD	A,(HL+)
   006D B6                  406 	OR	(HL)
   006E 28 03               407 	JR	Z,2$
   0070 23                  408 	INC	HL
   0071 18 F9               409 	JR	1$
   0073                     410 2$:
   0073 70                  411 	LD	(HL),B
   0074 2B                  412 	DEC	HL
   0075 71                  413 	LD	(HL),C
   0076 C9                  414 	RET
                            415 
                            416 	
                            417 	;; VBlank interrupt
   0077                     418 .vbl:
   0077 21r07s00            419 	LD	HL,#.sys_time
   007A 34                  420 	INC	(HL)
   007B 20 02               421 	JR	NZ,2$
   007D 23                  422 	INC	HL
   007E 34                  423 	INC	(HL)
   007F                     424 2$:	
   007F CDr00s00            425 	CALL	.refresh_OAM
                            426 
   0082 3E 01               427 	LD	A,#0x01
   0084 EAr05s00            428 	LD	(.vbl_done),A
   0087 C9                  429 	RET
                            430 
                            431 	;; Wait for VBL interrupt to be finished
   0088                     432 .wait_vbl_done::
   0088                     433 _wait_vbl_done::
                            434 	;; Check if the screen is on
   0088 F0 4E               435 	LDH	A,(.LCDC)
   008A 1F                  436 	RRA
   008B D0                  437 	RET	NC		; Return if screen is off
   008C AF                  438 	XOR	A
   008D F3                  439 	DI
   008E EAr05s00            440 	LD	(.vbl_done),A	; Clear any previous sets of vbl_done
   0091 FB                  441 	EI
   0092                     442 1$:
   0092 76                  443 	HALT			; Wait for any interrupt
   0093 00                  444 	NOP			; HALT sometimes skips the next instruction
   0094 FAr05s00            445 	LD	A,(.vbl_done)	; Was it a VBlank interrupt?
                            446 	;; Warning: we may lose a VBlank interrupt, if it occurs now
   0097 B7                  447 	OR	A
   0098 28 F8               448 	JR	Z,1$		; No: back to sleep!
                            449 
   009A AF                  450 	XOR	A
   009B EAr05s00            451 	LD	(.vbl_done),A
   009E C9                  452 	RET
                            453 
   009F                     454 .display_off::
   009F                     455 _display_off::
                            456 	;; Check if the screen is on
   009F F0 4E               457 	LDH	A,(.LCDC)
   00A1 87                  458 	ADD	A
   00A2 D0                  459 	RET	NC		; Return if screen is off
   00A3                     460 1$:				; We wait for the *NEXT* VBL 
   00A3 F0 44               461 	LDH	A,(.LY)
   00A5 FE 92               462 	CP	#0x92		; Smaller than or equal to 0x91?
   00A7 30 FA               463 	JR	NC,1$		; Loop until smaller than or equal to 0x91
   00A9                     464 2$:
   00A9 F0 44               465 	LDH	A,(.LY)
   00AB FE 91               466 	CP	#0x91		; Bigger than 0x90?
   00AD 38 FA               467 	JR	C,2$		; Loop until bigger than 0x90
                            468 
   00AF F0 4E               469 	LDH	A,(.LCDC)
   00B1 E6 FE               470 	AND	#0b11111110
   00B3 E0 4E               471 	LDH	(.LCDC),A	; Turn off screen
   00B5 C9                  472 	RET
                            473 
                            474 	;; Copy OAM data to OAM RAM
   00B6                     475 .start_refresh_OAM:
   00B6 3Es00               476 	LD	A,#>.OAM
   00B8 E0 46               477 	LDH	(.DMA),A	; Put A into DMA registers
   00BA 3E 28               478 	LD	A,#0x28		; We need to wait 160 ns
   00BC                     479 1$:
   00BC 3D                  480 	DEC	A
   00BD 20 FD               481 	JR	NZ,1$
   00BF C9                  482 	RET
   00C0                     483 .end_refresh_OAM:
                            484 
                            485 	;; Serial interrupt
   00C0                     486 .serial_IO::
   00C0 FAr04s00            487 	LD	A,(__io_status) ; Get status
                            488 
   00C3 FE 02               489 	CP	#.IO_RECEIVING
   00C5 20 09               490 	JR	NZ,10$
                            491 
                            492 	;; Receiving data
   00C7 F0 01               493 	LDH	A,(.SB)		; Get data byte
   00C9 EAr03s00            494 	LD	(__io_in),A	; Store it
   00CC 3E 00               495 	LD	A,#.IO_IDLE
   00CE 18 0E               496 	JR	11$
                            497 
   00D0                     498 10$:
                            499 
   00D0 FE 01               500 	CP	#.IO_SENDING
   00D2 20 16               501 	JR	NZ,99$
                            502 
                            503 	;; Sending data
   00D4 F0 01               504 	LDH	A,(.SB)		; Get data byte
   00D6 FE 55               505 	CP	#.DT_RECEIVING
   00D8 28 04               506 	JR	Z,11$
   00DA 3E 04               507 	LD	A,#.IO_ERROR
   00DC 18 02               508 	JR	12$
   00DE                     509 11$:
   00DE 3E 00               510 	LD	A,#.IO_IDLE
   00E0                     511 12$:
   00E0 EAr04s00            512 	LD	(__io_status),A ; Store status
                            513 
   00E3 AF                  514 	XOR	A
   00E4 E0 02               515 	LDH	(.SC),A		; Use external clock
   00E6 3E 66               516 	LD	A,#.DT_IDLE
   00E8 E0 01               517 	LDH	(.SB),A		; Reply with IDLE byte
   00EA                     518 99$:
   00EA 3E 80               519 	LD	A,#0x80
   00EC E0 02               520 	LDH	(.SC),A		; Enable transfer with external clock
   00EE C9                  521 	RET
                            522 
   00EF                     523 _mode::
   00EF F8 02               524 	LDA	HL,2(SP)	; Skip return address
   00F1 6E                  525 	LD	L,(HL)
   00F2 26 00               526 	LD	H,#0x00
   00F4 CDr00s00            527 	CALL	.set_mode
   00F7 C9                  528 	RET
                            529 
   00F8                     530 _get_mode::
   00F8 21r01s00            531 	LD	HL,#.mode
   00FB 5E                  532 	LD	E,(HL)
   00FC C9                  533 	RET
                            534 	
   00FD                     535 _enable_interrupts::
   00FD FB                  536 	EI
   00FE C9                  537 	RET
                            538 
   00FF                     539 _disable_interrupts::
   00FF F3                  540 	DI
   0100 C9                  541 	RET
                            542 
   0101                     543 .reset::
   0101                     544 _reset::
   0101 FAr00s00            545 	LD	A,(__cpu)
   0104 C3r50s01            546 	JP	.code_start
                            547 
   0107                     548 _set_interrupts::
   0107 F3                  549 	DI
   0108 F8 02               550 	LDA	HL,2(SP)	; Skip return address
   010A AF                  551 	XOR	A
   010B E0 0F               552 	LDH	(.IF),A		; Clear pending interrupts
   010D 7E                  553 	LD	A,(HL)
   010E E0 FF               554 	LDH	(.IE),A
   0110 FB                  555 	EI			; Enable interrupts
   0111 C9                  556 	RET
                            557 
   0112                     558 _remove_VBL::
   0112 C5                  559 	PUSH	BC
   0113 F8 04               560 	LDA	HL,4(SP)	; Skip return address and registers
   0115 4E                  561 	LD	C,(HL)
   0116 23                  562 	INC	HL
   0117 46                  563 	LD	B,(HL)
   0118 CDr10s00            564 	CALL	.remove_VBL
   011B C1                  565 	POP	BC
   011C C9                  566 	RET
                            567 
   011D                     568 _remove_LCD::
   011D C5                  569 	PUSH	BC
   011E F8 04               570 	LDA	HL,4(SP)	; Skip return address and registers
   0120 4E                  571 	LD	C,(HL)
   0121 23                  572 	INC	HL
   0122 46                  573 	LD	B,(HL)
   0123 CDr16s00            574 	CALL	.remove_LCD
   0126 C1                  575 	POP	BC
   0127 C9                  576 	RET
                            577 
   0128                     578 _remove_TIM::
   0128 C5                  579 	PUSH	BC
   0129 F8 04               580 	LDA	HL,4(SP)	; Skip return address and registers
   012B 4E                  581 	LD	C,(HL)
   012C 23                  582 	INC	HL
   012D 46                  583 	LD	B,(HL)
   012E CDr1Cs00            584 	CALL	.remove_TIM
   0131 C1                  585 	POP	BC
   0132 C9                  586 	RET
                            587 
   0133                     588 _remove_SIO::
   0133 C5                  589 	PUSH	BC
   0134 F8 04               590 	LDA	HL,4(SP)	; Skip return address and registers
   0136 4E                  591 	LD	C,(HL)
   0137 23                  592 	INC	HL
   0138 46                  593 	LD	B,(HL)
   0139 CDr22s00            594 	CALL	.remove_SIO
   013C C1                  595 	POP	BC
   013D C9                  596 	RET
                            597 
   013E                     598 _remove_JOY::
   013E C5                  599 	PUSH	BC
   013F F8 04               600 	LDA	HL,4(SP)	; Skip return address and registers
   0141 4E                  601 	LD	C,(HL)
   0142 23                  602 	INC	HL
   0143 46                  603 	LD	B,(HL)
   0144 CDr28s00            604 	CALL	.remove_JOY
   0147 C1                  605 	POP	BC
   0148 C9                  606 	RET
                            607 	
   0149                     608 _add_VBL::
   0149 C5                  609 	PUSH	BC
   014A F8 04               610 	LDA	HL,4(SP)	; Skip return address and registers
   014C 4E                  611 	LD	C,(HL)
   014D 23                  612 	INC	HL
   014E 46                  613 	LD	B,(HL)
   014F CDr2Es00            614 	CALL	.add_VBL
   0152 C1                  615 	POP	BC
   0153 C9                  616 	RET
                            617 
   0154                     618 _add_LCD::
   0154 C5                  619 	PUSH	BC
   0155 F8 04               620 	LDA	HL,4(SP)	; Skip return address and registers
   0157 4E                  621 	LD	C,(HL)
   0158 23                  622 	INC	HL
   0159 46                  623 	LD	B,(HL)
   015A CDr34s00            624 	CALL	.add_LCD
   015D C1                  625 	POP	BC
   015E C9                  626 	RET
                            627 
   015F                     628 _add_TIM::
   015F C5                  629 	PUSH	BC
   0160 F8 04               630 	LDA	HL,4(SP)	; Skip return address and registers
   0162 4E                  631 	LD	C,(HL)
   0163 23                  632 	INC	HL
   0164 46                  633 	LD	B,(HL)
   0165 CDr3As00            634 	CALL	.add_TIM
   0168 C1                  635 	POP	BC
   0169 C9                  636 	RET
                            637 
   016A                     638 _add_SIO::
   016A C5                  639 	PUSH	BC
   016B F8 04               640 	LDA	HL,4(SP)	; Skip return address and registers
   016D 4E                  641 	LD	C,(HL)
   016E 23                  642 	INC	HL
   016F 46                  643 	LD	B,(HL)
   0170 CDr40s00            644 	CALL	.add_SIO
   0173 C1                  645 	POP	BC
   0174 C9                  646 	RET
                            647 
   0175                     648 _add_JOY::
   0175 C5                  649 	PUSH	BC
   0176 F8 04               650 	LDA	HL,4(SP)	; Skip return address and registers
   0178 4E                  651 	LD	C,(HL)
   0179 23                  652 	INC	HL
   017A 46                  653 	LD	B,(HL)
   017B CDr46s00            654 	CALL	.add_JOY
   017E C1                  655 	POP	BC
   017F C9                  656 	RET
                            657 
   0180                     658 _clock::
   0180 21r07s00            659 	ld	hl,#.sys_time
   0183 F3                  660 	di
   0184 2A                  661 	ld	a,(hl+)
   0185 FB                  662 	ei
                            663 	;; Interrupts are disabled for the next instruction...
   0186 56                  664 	ld	d,(hl)
   0187 5F                  665 	ld	e,a
   0188 C9                  666 	ret
                            667 
   0189                     668 __printTStates::
   0189 C9                  669 	ret
                            670 
                            671 	;; Performs a long call.
                            672 	;; Basically:
                            673 	;;   call banked_call
                            674 	;;   .dw low
                            675 	;;   .dw bank
                            676 	;;   remainder of the code
                            677 	;; Total m-cycles:
                            678 	;;	3+4+4 + 2+2+2+2+2+2 + 4+4+ 3+4+1+1+1
                            679 	;;      = 41 for the call
                            680 	;;	3+3+4+4+1
                            681 	;;	= 15 for the ret
   018A                     682 banked_call::
   018A E1                  683 	pop	hl		; Get the return address
   018B FAr06s00            684 	ld	a,(__current_bank)
   018E F5                  685 	push	af		; Push the current bank onto the stack
   018F 5E                  686 	ld	e,(hl)		; Fetch the call address
   0190 23                  687 	inc	hl
   0191 56                  688 	ld	d,(hl)
   0192 23                  689 	inc	hl
   0193 2A                  690 	ld	a,(hl+)		; ...and page
   0194 23                  691 	inc	hl		; Yes this should be here
   0195 E5                  692 	push	hl		; Push the real return address
   0196 EAr06s00            693 	ld	(__current_bank),a
   0199 EA 00 20            694 	ld	(.MBC1_ROM_PAGE),a	; Perform the switch
   019C 21rA3s01            695 	ld	hl,#banked_ret	; Push the fake return address
   019F E5                  696 	push	hl
   01A0 6B                  697 	ld	l,e
   01A1 62                  698 	ld	h,d
   01A2 E9                  699 	jp	(hl)
                            700 
   01A3                     701 banked_ret::
   01A3 E1                  702 	pop	hl		; Get the return address
   01A4 F1                  703 	pop	af		; Pop the old bank
   01A5 EA 00 20            704 	ld	(.MBC1_ROM_PAGE),a
   01A8 EAr06s00            705 	ld	(__current_bank),a
   01AB E9                  706 	jp	(hl)
                            707 		
                            708 	.area	_HEAP
   0000                     709 _malloc_heap_start::
